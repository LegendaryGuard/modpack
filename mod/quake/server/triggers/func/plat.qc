#ifdef SVQC

void plat_center_touch(entity this, entity toucher);
void plat_outside_touch(entity this, entity toucher);
void plat_trigger_use(entity this, entity actor, entity trigger);
void plat_go_up(entity this);
void plat_go_down(entity this);
void plat_crush(entity this, entity blocker);
const int PLAT_LOW_TRIGGER = BIT(0);

void plat_spawn_inside_trigger(entity this)
{
//
// middle trigger
//	
	entity trigger = spawn();
	settouch(trigger, plat_center_touch);
	set_movetype(trigger, MOVETYPE_NONE);
	trigger.solid = SOLID_TRIGGER;
	trigger.enemy = this;
	
	vector tmin = this.mins + '25 25 0';
	vector tmax = this.maxs - '25 25 -8';
	tmin.z = tmax_z -(this.pos1_z - this.pos2_z + 8);
	if(this.spawnflags & PLAT_LOW_TRIGGER)
		tmax_z = tmin.z + 8;
	
	if(this.size_x <= 50)
	{
		tmin.x =(this.mins_x + this.maxs_x) / 2;
		tmax_x = tmin.x + 1;
	}
	if(this.size_y <= 50)
	{
		tmin.y =(this.mins_y + this.maxs_y) / 2;
		tmax_y = tmin.y + 1;
	}
	
	setsize(trigger, tmin, tmax);
}

void plat_hit_top(entity this)
{
	_sound(this, CH_TRIGGER_SINGLE, this.noise1, 1, ATTN_NORM);
	this.state = STATE_TOP;
	setthink(this, plat_go_down);
	this.nextthink = this.ltime + 3;
}

void plat_hit_bottom(entity this)
{
	_sound(this, CH_TRIGGER_SINGLE, this.noise1, 1, ATTN_NORM);
	this.state = STATE_BOTTOM;
}

void plat_go_down(entity this)
{
	_sound(this, CH_TRIGGER_SINGLE, this.noise, 1, ATTN_NORM);
	this.state = STATE_DOWN;
	SUB_CalcMove(this, this.pos2, TSPEED_LINEAR, this.speed, plat_hit_bottom);
}

void plat_go_up(entity this)
{
	_sound(this, CH_TRIGGER_SINGLE, this.noise, 1, ATTN_NORM);
	this.state = STATE_UP;
	SUB_CalcMove(this, this.pos1, TSPEED_LINEAR, this.speed, plat_hit_top);
}

void plat_center_touch(entity this, entity toucher)
{
	if(!IS_PLAYER(toucher))
		return;
		
	if(toucher.health <= 0)
		return;

	if(this.enemy.state == STATE_BOTTOM)
		plat_go_up(this.enemy);
	else if(this.enemy.state == STATE_TOP)
		this.enemy.nextthink = this.enemy.ltime + 1;	// delay going down
}

void plat_outside_touch(entity this, entity toucher)
{
	if(!IS_PLAYER(toucher))
		return;

	if(toucher.health <= 0)
		return;
		
//dprint("plat_outside_touch\n");
	if(this.enemy.state == STATE_TOP)
		plat_go_down(this.enemy);
}

void plat_trigger_use(entity this, entity actor, entity trigger)
{
	if(getthink(this))
		return;		// allready activated
	plat_go_down(this);
}


void plat_crush(entity this, entity blocker)
{
//dprint("plat_crush\n");

	T_Damage(blocker, this, this, ((IS_MONSTER(blocker)) ? 1000 : 1));
	
	if(this.state == STATE_UP)
		plat_go_down(this);
	else if(this.state == STATE_DOWN)
		plat_go_up(this);
	else
		objerror(this, "plat_crush: bad this.state\n");
}

void plat_use(entity this, entity actor, entity trigger)
{
	this.use = func_null;
	if(this.state != STATE_UP)
		objerror(this, "plat_use: not in up state");
	plat_go_down(this);
}


/*QUAKED func_plat(0 .5 .8) ? PLAT_LOW_TRIGGER
speed	default 150

Plats are always drawn in the extended position, so they will light correctly.

If the plat is the target of another trigger or button, it will start out disabled in the extended position until it is trigger, when it will lower and become a normal plat.

If the "height" key is set, that will determine the amount the plat moves, instead of being implicitly determined by the model's height.
Set "sounds" to one of the following:
1) base fast
2) chain slow
*/


spawnfunc(func_plat)
{
	if(!this.t_length)
		this.t_length = 80;
	if(!this.t_width)
		this.t_width = 10;

	if(this.sounds == 0)
		this.sounds = 2;
// FIX THIS TO LOAD A GENERIC PLAT SOUND

	if(this.sounds == 1)
	{
		precache_sound("plats/plat1.wav");
		precache_sound("plats/plat2.wav");
		this.noise = "plats/plat1.wav";
		this.noise1 = "plats/plat2.wav";
	}

	if(this.sounds == 2)
	{
		precache_sound("plats/quake_medplat1.wav");
		precache_sound("plats/quake_medplat2.wav");
		this.noise = "plats/quake_medplat1.wav";
		this.noise1 = "plats/quake_medplat2.wav";
	}


	this.mangle = this.angles;
	this.angles = '0 0 0';

	this.classname = "func_plat";
	if (!InitMovingBrushTrigger(this))
		return;
	this.effects |= EF_LOWPRECISION;
	setsize(this, this.mins , this.maxs);

	setblocked(this, plat_crush);
	if(!this.speed)
		this.speed = 150;

// pos1 is the top position, pos2 is the bottom
	this.pos1 = this.origin;
	this.pos2 = this.origin;
	if(this.height)
		this.pos2_z = this.origin_z - this.height;
	else
		this.pos2_z = this.origin_z - this.size_z + 8;

	this.use = plat_trigger_use;

	plat_spawn_inside_trigger(this);	// the "start moving" trigger	

	if(this.targetname && this.targetname != "")
	{
		this.state = STATE_UP;
		this.use = plat_use;
	}
	else
	{
		setorigin(this, this.pos2);
		this.state = STATE_BOTTOM;
	}
}

#endif
