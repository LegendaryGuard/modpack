#pragma once

/*
==================
SUB_VanishOrRemove

Makes client invisible or removes non-client
==================
*/
void SUB_VanishOrRemove(entity ent);

void SUB_SetFade_Think(entity this);

/*
==================
SUB_SetFade

Fade 'ent' out when time >= 'when'
==================
*/
.float fade_rate;
void SUB_SetFade(entity ent, float when, float fading_time);

#ifdef SVQC

void SUB_CopyEntity(entity srcent, entity destent);

vector SUB_NormalizeAngles(vector ang);

bool RemovedOutsideCoop(entity this);

bool Inhibit_Coop(entity this);

void InitTrigger(entity this);

const int TSPEED_LINEAR = 0;

const int NOT_IN_COOP = 131072;

float TemporaryDB;

float target_spawn_initialized;
.void(entity this) target_spawn_spawnfunc;
float target_spawn_spawnfunc_field;

void initialize_field_db()
{
	if(!target_spawn_initialized)
	{
		int n = numentityfields();
		for(int i = 0; i < n; ++i)
		{
			string fn = entityfieldname(i);
			int ft = entityfieldtype(i);
			vector next = i * '1 0 0' + ft * '0 1 0' + '0 0 1';
			vector prev = stov(db_get(TemporaryDB, strcat("/target_spawn/field/", fn)));
			if(prev.y == 0)
			{
				db_put(TemporaryDB, strcat("/target_spawn/field/", fn), vtos(next));
				if(fn == "target_spawn_spawnfunc")
					target_spawn_spawnfunc_field = i;
			}
		}

		target_spawn_initialized = 1;
	}
}

#endif

float SUB_LeftShift(float num, float bits);
float SUB_RightShift(float num, float bits);

#ifdef SVQC
vector attack_vector(vector attack_dir);

float SUB_Elevation(entity this, float theta, vector sorg, vector mdest, float zspeed);
#endif
