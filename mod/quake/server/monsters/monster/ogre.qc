/*
==============================================================================

OGRE

==============================================================================
*/

$cd id1/models/ogre_c
$origin 0 0 24
$base base		
$skin base

const int anim_ogre_stand1 = 0;
const int anim_ogre_stand2 = 1;
const int anim_ogre_stand3 = 2;
const int anim_ogre_stand4 = 3;
const int anim_ogre_stand5 = 4;
const int anim_ogre_stand6 = 5;
const int anim_ogre_stand7 = 6;
const int anim_ogre_stand8 = 7;
const int anim_ogre_stand9 = 8;

const int anim_ogre_walk1 = 9;
const int anim_ogre_walk2 = 10;
const int anim_ogre_walk3 = 11;
const int anim_ogre_walk4 = 12;
const int anim_ogre_walk5 = 13;
const int anim_ogre_walk6 = 14;
const int anim_ogre_walk7 = 15;
const int anim_ogre_walk8 = 16;
const int anim_ogre_walk9 = 17;
const int anim_ogre_walk10 = 18;
const int anim_ogre_walk11 = 19;
const int anim_ogre_walk12 = 20;
const int anim_ogre_walk13 = 21;
const int anim_ogre_walk14 = 22;
const int anim_ogre_walk15 = 23;
const int anim_ogre_walk16 = 24;

const int anim_ogre_run1 = 25;
const int anim_ogre_run2 = 26;
const int anim_ogre_run3 = 27;
const int anim_ogre_run4 = 28;
const int anim_ogre_run5 = 29;
const int anim_ogre_run6 = 30;
const int anim_ogre_run7 = 31;
const int anim_ogre_run8 = 32;

const int anim_ogre_swing1 = 33;
const int anim_ogre_swing2 = 34;
const int anim_ogre_swing3 = 35;
const int anim_ogre_swing4 = 36;
const int anim_ogre_swing5 = 37;
const int anim_ogre_swing6 = 38;
const int anim_ogre_swing7 = 39;
const int anim_ogre_swing8 = 40;
const int anim_ogre_swing9 = 41;
const int anim_ogre_swing10 = 42;
const int anim_ogre_swing11 = 43;
const int anim_ogre_swing12 = 44;
const int anim_ogre_swing13 = 45;
const int anim_ogre_swing14 = 46;

const int anim_ogre_smash1 = 47;
const int anim_ogre_smash2 = 48;
const int anim_ogre_smash3 = 49;
const int anim_ogre_smash4 = 50;
const int anim_ogre_smash5 = 51;
const int anim_ogre_smash6 = 52;
const int anim_ogre_smash7 = 53;
const int anim_ogre_smash8 = 54;
const int anim_ogre_smash9 = 55;
const int anim_ogre_smash10 = 56;
const int anim_ogre_smash11 = 57;
const int anim_ogre_smash12 = 58;
const int anim_ogre_smash13 = 59;
const int anim_ogre_smash14 = 60;

const int anim_ogre_shoot1 = 61;
const int anim_ogre_shoot2 = 62;
const int anim_ogre_shoot3 = 63;
const int anim_ogre_shoot4 = 64;
const int anim_ogre_shoot5 = 65;
const int anim_ogre_shoot6 = 66;

const int anim_ogre_pain1 = 67;
const int anim_ogre_pain2 = 68;
const int anim_ogre_pain3 = 69;
const int anim_ogre_pain4 = 70;
const int anim_ogre_pain5 = 71;

const int anim_ogre_painb1 = 72;
const int anim_ogre_painb2 = 73;
const int anim_ogre_painb3 = 74;

const int anim_ogre_painc1 = 75;
const int anim_ogre_painc2 = 76;
const int anim_ogre_painc3 = 77;
const int anim_ogre_painc4 = 78;
const int anim_ogre_painc5 = 79;
const int anim_ogre_painc6 = 80;

const int anim_ogre_paind1 = 81;
const int anim_ogre_paind2 = 82;
const int anim_ogre_paind3 = 83;
const int anim_ogre_paind4 = 84;
const int anim_ogre_paind5 = 85;
const int anim_ogre_paind6 = 86;
const int anim_ogre_paind7 = 87;
const int anim_ogre_paind8 = 88;
const int anim_ogre_paind9 = 89;
const int anim_ogre_paind10 = 90;
const int anim_ogre_paind11 = 91;
const int anim_ogre_paind12 = 92;
const int anim_ogre_paind13 = 93;
const int anim_ogre_paind14 = 94;
const int anim_ogre_paind15 = 95;
const int anim_ogre_paind16 = 96;

const int anim_ogre_paine1 = 97;
const int anim_ogre_paine2 = 98;
const int anim_ogre_paine3 = 99;
const int anim_ogre_paine4 = 100;
const int anim_ogre_paine5 = 101;
const int anim_ogre_paine6 = 102;
const int anim_ogre_paine7 = 103;
const int anim_ogre_paine8 = 104;
const int anim_ogre_paine9 = 105;
const int anim_ogre_paine10 = 106;
const int anim_ogre_paine11 = 107;
const int anim_ogre_paine12 = 108;
const int anim_ogre_paine13 = 109;
const int anim_ogre_paine14 = 110;
const int anim_ogre_paine15 = 111;

const int anim_ogre_death1 = 112;
const int anim_ogre_death2 = 113;
const int anim_ogre_death3 = 114;
const int anim_ogre_death4 = 115;
const int anim_ogre_death5 = 116;
const int anim_ogre_death6 = 117;
const int anim_ogre_death7 = 118;
const int anim_ogre_death8 = 119;
const int anim_ogre_death9 = 120;
const int anim_ogre_death10 = 121;
const int anim_ogre_death11 = 122;
const int anim_ogre_death12 = 123;
const int anim_ogre_death13 = 124;
const int anim_ogre_death14 = 125;

const int anim_ogre_bdeath1 = 126;
const int anim_ogre_bdeath2 = 127;
const int anim_ogre_bdeath3 = 128;
const int anim_ogre_bdeath4 = 129;
const int anim_ogre_bdeath5 = 130;
const int anim_ogre_bdeath6 = 131;
const int anim_ogre_bdeath7 = 132;
const int anim_ogre_bdeath8 = 133;
const int anim_ogre_bdeath9 = 134;
const int anim_ogre_bdeath10 = 135;

const int anim_ogre_pull1 = 136;
const int anim_ogre_pull2 = 137;
const int anim_ogre_pull3 = 138;
const int anim_ogre_pull4 = 139;
const int anim_ogre_pull5 = 140;
const int anim_ogre_pull6 = 141;
const int anim_ogre_pull7 = 142;
const int anim_ogre_pull8 = 143;
const int anim_ogre_pull9 = 144;
const int anim_ogre_pull10 = 145;
const int anim_ogre_pull11 = 146;

//=============================================================================

const int OGRE_BOSS = BIT(1);
const int OGRE_NORMAL = BIT(2);

void OgreGrenadeExplode(entity this)
{
	T_RadiusDamage(this, this.owner, 40, NULL);
	_sound(this, CH_VOICE, "weapons/r_exp3.wav", 1, ATTN_NORM);

	te_explosion(this.origin);

	this.velocity = '0 0 0';
	settouch(this, func_null);
	_setmodel(this, "progs/s_explod.spr");
	this.solid = SOLID_NOT;
	s_explode1(this);
}

void OgreGrenadeTouch(entity this, entity toucher)
{
	if(toucher == this.owner)
		return;		// don't explode on owner
	if(toucher.takedamage == DAMAGE_AIM)
	{
		OgreGrenadeExplode(this);
		return;
	}
	_sound(this, CH_VOICE, "weapons/bounce.wav", 1, ATTN_NORM);	// bounce sound
	if(this.velocity == '0 0 0')
		this.avelocity = '0 0 0';
}

/*
================
OgreFireGrenade
================
*/
void MultiGrenadeTouch(entity this, entity toucher);
void MultiGrenadeExplode(entity this);

void OgreFireGrenade(entity this)
{
	this.effects |= EF_MUZZLEFLASH;

	_sound(this, CH_WEAPON_SINGLE, "weapons/grenade.wav", 1, ATTN_NORM);

	entity missile = spawn();
	missile.owner = this;
	set_movetype(missile, MOVETYPE_BOUNCE);
	missile.solid = SOLID_BBOX;
	if(MP_ROGUE)
		missile.classname = "ogre_grenade";
		
// set missile speed	

	makevectors(this.angles);

	missile.velocity = normalize(this.enemy.origin - this.origin);
	missile.velocity = missile.velocity * 600;
	missile.velocity_z = 200;

	missile.avelocity = '300 300 300';

	missile.angles = vectoangles(missile.velocity);
	
	if(MP_ROGUE && (this.spawnflags & OGRE_BOSS))
	{
		settouch(missile, MultiGrenadeTouch);
		missile.nextthink = time + 2.5;
		setthink(missile, MultiGrenadeExplode);
		_setmodel(missile, "progs/mervup.mdl");
		setsize(missile, '0 0 0', '0 0 0');
		missile.classname = "MultiGrenade";
	}
	else
	{
		settouch(missile, OgreGrenadeTouch);
		missile.nextthink = time + 2.5;
		setthink(missile, OgreGrenadeExplode);
		_setmodel(missile, "progs/grenade.mdl");
		setsize(missile, '0 0 0', '0 0 0');		
		setorigin(missile, this.origin);
	}
}


//=============================================================================

/*
================
chainsaw
FIXME
================
*/
void chainsaw(entity this, float side)
{
	if(!this.enemy)
		return;
	if(!CanDamage(this.enemy, this))
		return;

	ai_charge(this, 10);

	if(vdist(this.enemy.origin - this.origin, >, 100))
		return;
		
	float ldmg =(random() + random() + random()) * 4;
	T_Damage(this.enemy, this, this, ldmg);
	
	if(side)
	{
		makevectors(this.angles);
		if(side == 1)
			SpawnMeatSpray(this, this.origin + v_forward*16, crandom() * 100 * v_right);
		else
			SpawnMeatSpray(this, this.origin + v_forward*16, side * v_right);
	}
}

void ogre_stand1(entity this);
void ogre_stand9(entity this) { set_anim(this, anim_ogre_stand9, ogre_stand1); ai_stand(this); }
void ogre_stand8(entity this) { set_anim(this, anim_ogre_stand8, ogre_stand9); ai_stand(this); }
void ogre_stand7(entity this) { set_anim(this, anim_ogre_stand7, ogre_stand8); ai_stand(this); }
void ogre_stand6(entity this) { set_anim(this, anim_ogre_stand6, ogre_stand7); ai_stand(this); }
void ogre_stand5(entity this)
{
	set_anim(this, anim_ogre_stand5, ogre_stand6);
	if(random() < 0.2)
		_sound(this, CH_VOICE, "ogre/ogidle.wav", 1, ATTN_IDLE);
	ai_stand(this);
}
void ogre_stand4(entity this) { set_anim(this, anim_ogre_stand4, ogre_stand5); ai_stand(this); }
void ogre_stand3(entity this) { set_anim(this, anim_ogre_stand3, ogre_stand4); ai_stand(this); }
void ogre_stand2(entity this) { set_anim(this, anim_ogre_stand2, ogre_stand3); ai_stand(this); }
void ogre_stand1(entity this) { set_anim(this, anim_ogre_stand1, ogre_stand2); ai_stand(this); }

void ogre_walk1(entity this);
void ogre_walk16(entity this) { set_anim(this, anim_ogre_walk16, ogre_walk1); ai_walk(this, 4); }
void ogre_walk15(entity this) { set_anim(this, anim_ogre_walk15, ogre_walk16); ai_walk(this, 3); }
void ogre_walk14(entity this) { set_anim(this, anim_ogre_walk14, ogre_walk15); ai_walk(this, 3); }
void ogre_walk13(entity this) { set_anim(this, anim_ogre_walk13, ogre_walk14); ai_walk(this, 3); }
void ogre_walk12(entity this) { set_anim(this, anim_ogre_walk12, ogre_walk13); ai_walk(this, 3); }
void ogre_walk11(entity this) { set_anim(this, anim_ogre_walk11, ogre_walk12); ai_walk(this, 2); }
void ogre_walk10(entity this) { set_anim(this, anim_ogre_walk10, ogre_walk11); ai_walk(this, 1); }
void ogre_walk9(entity this) { set_anim(this, anim_ogre_walk9, ogre_walk10); ai_walk(this, 3); }
void ogre_walk8(entity this) { set_anim(this, anim_ogre_walk8, ogre_walk9); ai_walk(this, 2); }
void ogre_walk7(entity this) { set_anim(this, anim_ogre_walk7, ogre_walk8); ai_walk(this, 3); }
void ogre_walk6(entity this)
{
	set_anim(this, anim_ogre_walk6, ogre_walk7);
	ai_walk(this, 5);
	if(random() < 0.2)
		_sound(this, CH_VOICE, "ogre/ogdrag.wav", 1, ATTN_IDLE);
}
void ogre_walk5(entity this) { set_anim(this, anim_ogre_walk5, ogre_walk6); ai_walk(this, 2); }
void ogre_walk4(entity this) { set_anim(this, anim_ogre_walk4, ogre_walk5); ai_walk(this, 2); }
void ogre_walk3(entity this)
{
	set_anim(this, anim_ogre_walk3, ogre_walk4);
	ai_walk(this, 2);
	if(random() < 0.2)
		_sound(this, CH_VOICE, "ogre/ogidle.wav", 1, ATTN_IDLE);
}
void ogre_walk2(entity this) { set_anim(this, anim_ogre_walk2, ogre_walk3); ai_walk(this, 2); }
void ogre_walk1(entity this) { set_anim(this, anim_ogre_walk1, ogre_walk2); ai_walk(this, 3); }

void ogre_run1(entity this);
void ogre_run8(entity this) { set_anim(this, anim_ogre_run8, ogre_run1); ai_run(this, 9); }
void ogre_run7(entity this) { set_anim(this, anim_ogre_run7, ogre_run8); ai_run(this, 12); }
void ogre_run6(entity this) { set_anim(this, anim_ogre_run6, ogre_run7); ai_run(this, 8); }
void ogre_run5(entity this) { set_anim(this, anim_ogre_run5, ogre_run6); ai_run(this, 22); }
void ogre_run4(entity this) { set_anim(this, anim_ogre_run4, ogre_run5); ai_run(this, 16); }
void ogre_run3(entity this) { set_anim(this, anim_ogre_run3, ogre_run4); ai_run(this, 4); }
void ogre_run2(entity this) { set_anim(this, anim_ogre_run2, ogre_run3); ai_run(this, 13); }
void ogre_run1(entity this)
{
	set_anim(this, anim_ogre_run1, ogre_run2);
	ai_run(this, 24);
	if(random() < 0.2)
		_sound(this, CH_VOICE, "ogre/ogidle2.wav", 1, ATTN_IDLE);
}

void ogre_swing14(entity this) { set_anim(this, anim_ogre_swing14, ogre_run1); ai_charge(this, 9); }
void ogre_swing13(entity this) { set_anim(this, anim_ogre_swing13, ogre_swing14); ai_charge(this, 8); }
void ogre_swing12(entity this) { set_anim(this, anim_ogre_swing12, ogre_swing13); ai_charge(this, 3); }
void ogre_swing11(entity this) { set_anim(this, anim_ogre_swing11, ogre_swing12); chainsaw(this, 0); this.angles_y = this.angles_y + random() * 25; }
void ogre_swing10(entity this) { set_anim(this, anim_ogre_swing10, ogre_swing11); chainsaw(this, -200); this.angles_y = this.angles_y + random() * 25; }
void ogre_swing9(entity this) { set_anim(this, anim_ogre_swing9, ogre_swing10); chainsaw(this, 0); this.angles_y = this.angles_y + random() * 25; }
void ogre_swing8(entity this) { set_anim(this, anim_ogre_swing8, ogre_swing9); chainsaw(this, 0); this.angles_y = this.angles_y + random() * 25; }
void ogre_swing7(entity this) { set_anim(this, anim_ogre_swing7, ogre_swing8); chainsaw(this, 0); this.angles_y = this.angles_y + random() * 25; }
void ogre_swing6(entity this) { set_anim(this, anim_ogre_swing6, ogre_swing7); chainsaw(this, 200); this.angles_y = this.angles_y + random() * 25; }
void ogre_swing5(entity this) { set_anim(this, anim_ogre_swing5, ogre_swing6); ai_charge(this, 9); chainsaw(this, 0); this.angles_y = this.angles_y + random() * 25; }
void ogre_swing4(entity this) { set_anim(this, anim_ogre_swing4, ogre_swing5); ai_charge(this, 13); }
void ogre_swing3(entity this) { set_anim(this, anim_ogre_swing3, ogre_swing4); ai_charge(this, 4); }
void ogre_swing2(entity this) { set_anim(this, anim_ogre_swing2, ogre_swing3); ai_charge(this, 1); }
void ogre_swing1(entity this)
{
	set_anim(this, anim_ogre_swing1, ogre_swing2);
	ai_charge(this, 11);
	_sound(this, CH_WEAPON_SINGLE, "ogre/ogsawatk.wav", 1, ATTN_NORM);
}

void ogre_smash14(entity this) { set_anim(this, anim_ogre_smash14, ogre_run1); ai_charge(this, 12); }
void ogre_smash13(entity this) { set_anim(this, anim_ogre_smash13, ogre_smash14); ai_charge(this, 4); }
void ogre_smash12(entity this) { set_anim(this, anim_ogre_smash12, ogre_smash13); ai_charge(this, 0); }
void ogre_smash11(entity this) { set_anim(this, anim_ogre_smash11, ogre_smash12); chainsaw(this, 2); this.nextthink = this.nextthink + random() * 0.2; /* slight variation */ }
void ogre_smash10(entity this) { set_anim(this, anim_ogre_smash10, ogre_smash11); chainsaw(this, 1); }
void ogre_smash9(entity this) { set_anim(this, anim_ogre_smash9, ogre_smash10); ai_charge(this, 13); chainsaw(this, 0); }
void ogre_smash8(entity this) { set_anim(this, anim_ogre_smash8, ogre_smash9); ai_charge(this, 10); chainsaw(this, 0); }
void ogre_smash7(entity this) { set_anim(this, anim_ogre_smash7, ogre_smash8); ai_charge(this, 4); chainsaw(this, 0); }
void ogre_smash6(entity this) { set_anim(this, anim_ogre_smash6, ogre_smash7); ai_charge(this, 4); chainsaw(this, 0); }
void ogre_smash5(entity this) { set_anim(this, anim_ogre_smash5, ogre_smash6); ai_charge(this, 4); }
void ogre_smash4(entity this) { set_anim(this, anim_ogre_smash4, ogre_smash5); ai_charge(this, 1); }
void ogre_smash3(entity this) { set_anim(this, anim_ogre_smash3, ogre_smash4); ai_charge(this, 0); }
void ogre_smash2(entity this) { set_anim(this, anim_ogre_smash2, ogre_smash3); ai_charge(this, 0); }
void ogre_smash1(entity this)
{
	set_anim(this, anim_ogre_smash1, ogre_smash2);
	ai_charge(this, 6);
	_sound(this, CH_WEAPON_SINGLE, "ogre/ogsawatk.wav", 1, ATTN_NORM);
}

void ogre_nail7(entity this) { set_anim(this, anim_ogre_shoot6, ogre_run1); ai_face(this); }
void ogre_nail6(entity this) { set_anim(this, anim_ogre_shoot5, ogre_nail7); ai_face(this); }
void ogre_nail5(entity this) { set_anim(this, anim_ogre_shoot4, ogre_nail6); ai_face(this); }
void ogre_nail4(entity this) { set_anim(this, anim_ogre_shoot3, ogre_nail5); ai_face(this); OgreFireGrenade(this); }
void ogre_nail3(entity this) { set_anim(this, anim_ogre_shoot2, ogre_nail4); ai_face(this); }
void ogre_nail2(entity this) { set_anim(this, anim_ogre_shoot2, ogre_nail3); ai_face(this); }
void ogre_nail1(entity this) { set_anim(this, anim_ogre_shoot1, ogre_nail2); ai_face(this); }

void ogre_pain5(entity this) { set_anim(this, anim_ogre_pain5, ogre_run1); }
void ogre_pain4(entity this) { set_anim(this, anim_ogre_pain4, ogre_pain5); }
void ogre_pain3(entity this) { set_anim(this, anim_ogre_pain3, ogre_pain4); }
void ogre_pain2(entity this) { set_anim(this, anim_ogre_pain2, ogre_pain3); }
void ogre_pain1(entity this) { set_anim(this, anim_ogre_pain1, ogre_pain2); }

void ogre_painb3(entity this) { set_anim(this, anim_ogre_painb3, ogre_run1); }
void ogre_painb2(entity this) { set_anim(this, anim_ogre_painb2, ogre_painb3); }
void ogre_painb1(entity this) { set_anim(this, anim_ogre_painb1, ogre_painb2); }

void ogre_painc6(entity this) { set_anim(this, anim_ogre_painc6, ogre_run1); }
void ogre_painc5(entity this) { set_anim(this, anim_ogre_painc5, ogre_painc6); }
void ogre_painc4(entity this) { set_anim(this, anim_ogre_painc4, ogre_painc5); }
void ogre_painc3(entity this) { set_anim(this, anim_ogre_painc3, ogre_painc4); }
void ogre_painc2(entity this) { set_anim(this, anim_ogre_painc2, ogre_painc3); }
void ogre_painc1(entity this) { set_anim(this, anim_ogre_painc1, ogre_painc2); }

void ogre_paind16(entity this) { set_anim(this, anim_ogre_paind16, ogre_run1); }
void ogre_paind15(entity this) { set_anim(this, anim_ogre_paind15, ogre_paind16); }
void ogre_paind14(entity this) { set_anim(this, anim_ogre_paind14, ogre_paind15); }
void ogre_paind13(entity this) { set_anim(this, anim_ogre_paind13, ogre_paind14); }
void ogre_paind12(entity this) { set_anim(this, anim_ogre_paind12, ogre_paind13); }
void ogre_paind11(entity this) { set_anim(this, anim_ogre_paind11, ogre_paind12); }
void ogre_paind10(entity this) { set_anim(this, anim_ogre_paind10, ogre_paind11); }
void ogre_paind9(entity this) { set_anim(this, anim_ogre_paind9, ogre_paind10); }
void ogre_paind8(entity this) { set_anim(this, anim_ogre_paind8, ogre_paind9); }
void ogre_paind7(entity this) { set_anim(this, anim_ogre_paind7, ogre_paind8); }
void ogre_paind6(entity this) { set_anim(this, anim_ogre_paind6, ogre_paind7); }
void ogre_paind5(entity this) { set_anim(this, anim_ogre_paind5, ogre_paind6); }
void ogre_paind4(entity this) { set_anim(this, anim_ogre_paind4, ogre_paind5); ai_pain(this, 4); }
void ogre_paind3(entity this) { set_anim(this, anim_ogre_paind3, ogre_paind4); ai_pain(this, 9); }
void ogre_paind2(entity this) { set_anim(this, anim_ogre_paind2, ogre_paind3); ai_pain(this, 10); }
void ogre_paind1(entity this) { set_anim(this, anim_ogre_paind1, ogre_paind2); }

void ogre_paine15(entity this) { set_anim(this, anim_ogre_paine15, ogre_run1); }
void ogre_paine14(entity this) { set_anim(this, anim_ogre_paine14, ogre_paine15); }
void ogre_paine13(entity this) { set_anim(this, anim_ogre_paine13, ogre_paine14); }
void ogre_paine12(entity this) { set_anim(this, anim_ogre_paine12, ogre_paine13); }
void ogre_paine11(entity this) { set_anim(this, anim_ogre_paine11, ogre_paine12); }
void ogre_paine10(entity this) { set_anim(this, anim_ogre_paine10, ogre_paine11); }
void ogre_paine9(entity this) { set_anim(this, anim_ogre_paine9, ogre_paine10); }
void ogre_paine8(entity this) { set_anim(this, anim_ogre_paine8, ogre_paine9); }
void ogre_paine7(entity this) { set_anim(this, anim_ogre_paine7, ogre_paine8); }
void ogre_paine6(entity this) { set_anim(this, anim_ogre_paine6, ogre_paine7); }
void ogre_paine5(entity this) { set_anim(this, anim_ogre_paine5, ogre_paine6); }
void ogre_paine4(entity this) { set_anim(this, anim_ogre_paine4, ogre_paine5); ai_pain(this, 4); }
void ogre_paine3(entity this) { set_anim(this, anim_ogre_paine3, ogre_paine4); ai_pain(this, 9); }
void ogre_paine2(entity this) { set_anim(this, anim_ogre_paine2, ogre_paine3); ai_pain(this, 10); }
void ogre_paine1(entity this) { set_anim(this, anim_ogre_paine1, ogre_paine2); }

void ogre_pain(entity this, entity attacker, float damage)
{
// don't make multiple pain sounds right after each other
	if(this.pain_finished > time)
		return;

	_sound(this, CH_VOICE, "ogre/ogpain1.wav", 1, ATTN_NORM);		

	float r = random();
	
	if(r < 0.25)
	{
		ogre_pain1(this);
		this.pain_finished = time + 1;
	}
	else if(r < 0.5)
	{
		ogre_painb1(this);
		this.pain_finished = time + 1;
	}
	else if(r < 0.75)
	{
		ogre_painc1(this);
		this.pain_finished = time + 1;
	}
	else if(r < 0.88)
	{
		ogre_paind1(this);
		this.pain_finished = time + 2;
	}
	else
	{
		ogre_paine1(this);
		this.pain_finished = time + 2;
	}
}

void ogre_die14(entity this) { set_anim(this, anim_ogre_death14, ogre_die14); }
void ogre_die13(entity this) { set_anim(this, anim_ogre_death13, ogre_die14); }
void ogre_die12(entity this) { set_anim(this, anim_ogre_death12, ogre_die13); }
void ogre_die11(entity this) { set_anim(this, anim_ogre_death11, ogre_die12); }
void ogre_die10(entity this) { set_anim(this, anim_ogre_death10, ogre_die11); }
void ogre_die9(entity this) { set_anim(this, anim_ogre_death9, ogre_die10); }
void ogre_die8(entity this) { set_anim(this, anim_ogre_death8, ogre_die9); }
void ogre_die7(entity this) { set_anim(this, anim_ogre_death7, ogre_die8); }
void ogre_die6(entity this) { set_anim(this, anim_ogre_death6, ogre_die7); }
void ogre_die5(entity this) { set_anim(this, anim_ogre_death5, ogre_die6); }
void ogre_die4(entity this) { set_anim(this, anim_ogre_death4, ogre_die5); }
void ogre_die3(entity this)
{
	set_anim(this, anim_ogre_death3, ogre_die4);
	this.solid = SOLID_NOT;
	if(MP_ROGUE && (this.spawnflags & OGRE_BOSS))
		this.ammo_multi_rockets = 2;
	else
		this.ammo_rockets = 2;
	DropBackpack(this);
}
void ogre_die2(entity this) { set_anim(this, anim_ogre_death2, ogre_die3); }
void ogre_die1(entity this) { set_anim(this, anim_ogre_death1, ogre_die2); }

void ogre_bdie10(entity this) { set_anim(this, anim_ogre_bdeath10, ogre_bdie10); }
void ogre_bdie9(entity this) { set_anim(this, anim_ogre_bdeath9, ogre_bdie10); }
void ogre_bdie8(entity this) { set_anim(this, anim_ogre_bdeath8, ogre_bdie9); }
void ogre_bdie7(entity this) { set_anim(this, anim_ogre_bdeath7, ogre_bdie8); ai_forward(this, 25); }
void ogre_bdie6(entity this) { set_anim(this, anim_ogre_bdeath6, ogre_bdie7); ai_forward(this, 7); }
void ogre_bdie5(entity this) { set_anim(this, anim_ogre_bdeath5, ogre_bdie6); ai_forward(this, 3); }
void ogre_bdie4(entity this) { set_anim(this, anim_ogre_bdeath4, ogre_bdie5); ai_forward(this, 1); }
void ogre_bdie3(entity this)
{
	set_anim(this, anim_ogre_bdeath3, ogre_bdie4);
	this.solid = SOLID_NOT;
	if(MP_ROGUE && (this.spawnflags & OGRE_BOSS))
		this.ammo_multi_rockets = 2;
	else
		this.ammo_rockets = 2;
	DropBackpack(this);
}
void ogre_bdie2(entity this) { set_anim(this, anim_ogre_bdeath2, ogre_bdie3); ai_forward(this, 5); }
void ogre_bdie1(entity this) { set_anim(this, anim_ogre_bdeath1, ogre_bdie2); }

void ogre_die(entity this, entity attacker)
{
// check for gib
	if(this.health < -80)
	{
		_sound(this, CH_VOICE, "player/udeath.wav", 1, ATTN_NORM);
		ThrowHead(this, "progs/h_ogre.mdl", this.health);
		ThrowGib(this, "progs/gib3.mdl", this.health);
		ThrowGib(this, "progs/gib3.mdl", this.health);
		ThrowGib(this, "progs/gib3.mdl", this.health);
		return;
	}

	_sound(this, CH_VOICE, "ogre/ogdth.wav", 1, ATTN_NORM);
	
	if(random() < 0.5)
		ogre_die1(this);
	else
		ogre_bdie1(this);
}

void ogre_melee(entity this)
{
	if(random() > 0.5)
		ogre_smash1(this);
	else
		ogre_swing1(this);
}

/*
===========
OgreCheckAttack

The player is in view, so decide to move or launch an attack
Returns false if movement should continue
============
*/
bool OgreCheckAttack(entity this)
{
	if(this.enemy_range == RANGE_MELEE)
	{
		if(CanDamage(this.enemy, this))
		{
			this.attack_state = AS_MELEE;
			return true;
		}
	}

	if(time < this.attack_finished)
		return false;
	
	if(!this.enemy_vis)
		return false;
		
	entity targ = this.enemy;
	
// see if any entities are in the way of the shot
	vector spot1 = this.origin + this.view_ofs;
	vector spot2 = targ.origin + targ.view_ofs;

	traceline(spot1, spot2, false, this);

	if(trace_inopen && trace_inwater)
		return false;			// sight line crossed contents

	if(trace_ent != targ)
	{
		return false;	// don't have a clear shot
	}
			
// missile attack
	float chance;
	if(time < this.attack_finished)
		return false;
		
	if(this.enemy_range == RANGE_FAR)
		return false;
	
	else if(this.enemy_range == RANGE_NEAR)
		chance = 0.10;
	else if(this.enemy_range == RANGE_MID)
		chance = 0.05;
	else
		chance = 0;

	this.attack_state = AS_MISSILE;
	SUB_AttackFinished(this, 1 + 2*random());
	return true;
}

string ogre_sight(entity this) { return "ogre/ogwake.wav"; }
string ogre_deathmessage(entity this) { return "was destroyed by an Ogre"; }

/*QUAKED monster_ogre(1 0 0)(-32 -32 -24)(32 32 64) Ambush Boss Normal
The Ogre

Boss: (rogue only) use the modified skin and fire multigrenades.
Normal: use the original skin and fire normal grenades.
*/
spawnfunc(monster_ogre)
{
	if(deathmatch) { delete(this); return; }
	precache_model("progs/ogre.mdl");
	precache_model("progs/h_ogre.mdl");
	precache_model("progs/grenade.mdl");

	precache_sound("ogre/ogdrag.wav");
	precache_sound("ogre/ogdth.wav");
	precache_sound("ogre/ogidle.wav");
	precache_sound("ogre/ogidle2.wav");
	precache_sound("ogre/ogpain1.wav");
	precache_sound("ogre/ogsawatk.wav");
	precache_sound("ogre/ogwake.wav");

	this.solid = SOLID_SLIDEBOX;
	set_movetype(this, MOVETYPE_STEP);

	_setmodel(this, "progs/ogre.mdl");

	if(MP_ROGUE)
	{
		// none specified - choose random. 25% boss on normal, hard, bloodbath
		if(this.spawnflags <= 1)
			if(cvar("skill") > 0)
				if(random() <= 0.25)
					this.spawnflags |= OGRE_BOSS;
		
		if(this.spawnflags & OGRE_BOSS)
			this.skin = 1;
	}

	setsize(this, VEC_HULL2_MIN, VEC_HULL2_MAX);
	this.health = 200;

	this.th_stand = ogre_stand1;
	this.th_walk = ogre_walk1;
	this.th_run = ogre_run1;
	this.th_die = ogre_die;
	this.th_melee = ogre_melee;
	this.th_missile = ogre_nail1;
	this.th_pain = ogre_pain;

	this.sightsound = ogre_sight;
	this.checkattack = OgreCheckAttack;
	this.deathmessage = ogre_deathmessage;

	monster_start(this, 0);
}

spawnfunc(monster_ogre_marksman)
{
	if(MP_ROGUE) { delete(this); return; }
	spawnfunc_monster_ogre(this);
}
