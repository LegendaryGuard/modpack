$skin aztec
$skin pharoah
$skin roman
$skin florskin


const int anim_morph_mfstand1 = 0; 
//$frame mfup01 mfup02 mfup03 mfup04 mfup05 mfup06
//$frame mfup07 mfup08 mfup09 mfup10 mfup11 mfup12

const int anim_morph_start01 = 1;
const int anim_morph_start02 = 2;
const int anim_morph_start03 = 3;
const int anim_morph_start04 = 4;
const int anim_morph_start05 = 5;
const int anim_morph_start06 = 6;
const int anim_morph_start07 = 7;
const int anim_morph_start08 = 8;
const int anim_morph_start09 = 9;
const int anim_morph_start10 = 10;
const int anim_morph_start11 = 11;
const int anim_morph_start12 = 12;
const int anim_morph_start13 = 13;
const int anim_morph_start14 = 14;
const int anim_morph_start15 = 15;
const int anim_morph_start16 = 16;
const int anim_morph_start17 = 17;
const int anim_morph_start18 = 18;
const int anim_morph_start19 = 19;
const int anim_morph_start20 = 20;
const int anim_morph_start21 = 21;
const int anim_morph_start22 = 22;
const int anim_morph_start23 = 23;
const int anim_morph_start24 = 24;
const int anim_morph_start25 = 25;
const int anim_morph_start26 = 26;
const int anim_morph_start27 = 27;
const int anim_morph_start28 = 28;
const int anim_morph_start29 = 29;
const int anim_morph_start30 = 30;
const int anim_morph_start31 = 31;

const int anim_morph_mfrun01 = 32;
const int anim_morph_mfrun02 = 33;
const int anim_morph_mfrun03 = 34;
const int anim_morph_mfrun04 = 35;
const int anim_morph_mfrun05 = 36;
const int anim_morph_mfrun06 = 37;
const int anim_morph_mfrun07 = 38;
const int anim_morph_mfrun08 = 39;
const int anim_morph_mfrun09 = 40;
const int anim_morph_mfrun10 = 41;
const int anim_morph_mfrun11 = 42;

const int anim_morph_mfwlk01 = 43;
const int anim_morph_mfwlk02 = 44;
const int anim_morph_mfwlk03 = 45;
const int anim_morph_mfwlk04 = 46;
const int anim_morph_mfwlk05 = 47;
const int anim_morph_mfwlk06 = 48;
const int anim_morph_mfwlk07 = 49;
const int anim_morph_mfwlk08 = 50;
const int anim_morph_mfwlk09 = 51;
const int anim_morph_mfwlk10 = 52;
const int anim_morph_mfwlk11 = 53;
const int anim_morph_mfwlk12 = 54;
const int anim_morph_mfwlk13 = 55;

const int anim_morph_mfata01 = 56;
const int anim_morph_mfata02 = 57;
const int anim_morph_mfata03 = 58;
const int anim_morph_mfata04 = 59;
const int anim_morph_mfata05 = 60;
const int anim_morph_mfata06 = 61;
const int anim_morph_mfata07 = 62;
const int anim_morph_mfata08 = 63;
const int anim_morph_mfata09 = 64;

const int anim_morph_mfatb01 = 65;
const int anim_morph_mfatb02 = 66;
const int anim_morph_mfatb03 = 67;
const int anim_morph_mfatb04 = 68;
const int anim_morph_mfatb05 = 69;
const int anim_morph_mfatb06 = 70;
const int anim_morph_mfatb07 = 71;
const int anim_morph_mfatb08 = 72;
const int anim_morph_mfatb09 = 73;
const int anim_morph_mfatb10 = 74;
const int anim_morph_mfatb11 = 75;

const int anim_morph_mfatc01 = 76;
const int anim_morph_mfatc02 = 77;
const int anim_morph_mfatc03 = 78;
const int anim_morph_mfatc04 = 79;
const int anim_morph_mfatc05 = 80;
const int anim_morph_mfatc06 = 81;
const int anim_morph_mfatc07 = 82;
const int anim_morph_mfatc08 = 83;
const int anim_morph_mfatc09 = 84;
const int anim_morph_mfatc10 = 85;
const int anim_morph_mfatc11 = 86;
const int anim_morph_mfatc12 = 87;
const int anim_morph_mfatc13 = 88;
const int anim_morph_mfatc14 = 89;
const int anim_morph_mfatc15 = 90;
const int anim_morph_mfatc16 = 91;

const int anim_morph_mfknck01 = 92;
const int anim_morph_mfknck02 = 93;
const int anim_morph_mfknck03 = 94;
const int anim_morph_mfknck04 = 95;
const int anim_morph_mfknck05 = 96;
const int anim_morph_mfknck06 = 97;
const int anim_morph_mfknck07 = 98;
const int anim_morph_mfknck08 = 99;
const int anim_morph_mfknck09 = 100;
const int anim_morph_mfknck10 = 101;
const int anim_morph_mfknck11 = 102;
const int anim_morph_mfknck12 = 103;

const int anim_morph_mfpain01 = 104;
const int anim_morph_mfpain02 = 105;
const int anim_morph_mfpain03 = 106;
const int anim_morph_mfpain04 = 107;
const int anim_morph_mfpain05 = 108;
const int anim_morph_mfpain06 = 109;
const int anim_morph_mfpain07 = 110;
const int anim_morph_mfpain08 = 111;
const int anim_morph_mfpain09 = 112;
const int anim_morph_mfpain10 = 113;

const int anim_morph_mfpbin01 = 114;
const int anim_morph_mfpbin02 = 115;
const int anim_morph_mfpbin03 = 116;
const int anim_morph_mfpbin04 = 117;
const int anim_morph_mfpbin05 = 118;
const int anim_morph_mfpbin06 = 119;
const int anim_morph_mfpbin07 = 120;

const int anim_morph_mfdth01 = 121;
const int anim_morph_mfdth02 = 122;
const int anim_morph_mfdth03 = 123;
const int anim_morph_mfdth04 = 124;
const int anim_morph_mfdth05 = 125;
const int anim_morph_mfdth06 = 126;
const int anim_morph_mfdth07 = 127;
const int anim_morph_mfdth08 = 128;
const int anim_morph_mfdth09 = 129;
const int anim_morph_mfdth10 = 130;
const int anim_morph_mfdth11 = 131;
const int anim_morph_mfdth12 = 132;
const int anim_morph_mfdth13 = 133;
const int anim_morph_mfdth14 = 134;
const int anim_morph_mfdth15 = 135;
const int anim_morph_mfdth16 = 136;
const int anim_morph_mfdth17 = 137;
const int anim_morph_mfdth18 = 138;
const int anim_morph_mfdth19 = 139;
const int anim_morph_mfdth20 = 140;
const int anim_morph_mfdth21 = 141; 

const int MORPH_AZTEC = BIT(1);
const int MORPH_EGYPT = BIT(2);
const int MORPH_GREEK = BIT(3);

.float childrenSpawned;

void morph_teleport(entity this);

// ========================
// standing
// ========================
void morph_stand1(entity this) { set_anim(this, anim_morph_mfstand1, morph_stand1); ai_stand(this); }

// ========================
// movement
// ========================
// 3 2 1 1 0 1 2 3 4 5 4 2 1 0
// 3 2 1 2 3 4 4 3 2 1 2 3 3 
// 2 4 4 4 3 3 2 2 4 4 3 2 1
// 4 5 5 4 3 2 2 4 5 4 3 2 2
void morph_walk1(entity this);
 // 1
void morph_walk13(entity this) { set_anim(this, anim_morph_mfwlk13, morph_walk1); ai_walk(this, 3); }
void morph_walk12(entity this) { set_anim(this, anim_morph_mfwlk12, morph_walk13); ai_walk(this, 4); }
void morph_walk11(entity this) { set_anim(this, anim_morph_mfwlk11, morph_walk12); ai_walk(this, 5); }
void morph_walk10(entity this) { set_anim(this, anim_morph_mfwlk10, morph_walk11); ai_walk(this, 5); }
void morph_walk9(entity this) { set_anim(this, anim_morph_mfwlk09, morph_walk10); ai_walk(this, 4); }
void morph_walk8(entity this) { set_anim(this, anim_morph_mfwlk08, morph_walk9); ai_walk(this, 3); }
 //1 
void morph_walk7(entity this) { set_anim(this, anim_morph_mfwlk07, morph_walk8); ai_walk(this, 2); }
 //1
void morph_walk6(entity this) { set_anim(this, anim_morph_mfwlk06, morph_walk7); ai_walk(this, 4); }
void morph_walk5(entity this) { set_anim(this, anim_morph_mfwlk05, morph_walk6); ai_walk(this, 5); }
void morph_walk4(entity this) { set_anim(this, anim_morph_mfwlk04, morph_walk5); ai_walk(this, 5); }
void morph_walk3(entity this) { set_anim(this, anim_morph_mfwlk03, morph_walk4); ai_walk(this, 4); }
void morph_walk2(entity this) { set_anim(this, anim_morph_mfwlk02, morph_walk3); ai_walk(this, 2); }
void morph_walk1(entity this) { set_anim(this, anim_morph_mfwlk01, morph_walk2); ai_walk(this, 3); }

// 8 6 4 10 13 13 11 10
// 11 15 10 10 8 15 10 8 8 8 8
// 6 9 13 13 9 6 9 13 15 13 9
void morph_run1(entity this);
	// 43
void morph_run11(entity this) { set_anim(this, anim_morph_mfrun11, morph_run1); ai_run(this, 11); }
		
void morph_run10(entity this) { set_anim(this, anim_morph_mfrun10, morph_run11); ai_run(this, 15); }
		
void morph_run9(entity this) { set_anim(this, anim_morph_mfrun09, morph_run10); ai_run(this, 19); }
	// 40
void morph_run8(entity this) { set_anim(this, anim_morph_mfrun08, morph_run9); ai_run(this, 15); }
void morph_run7(entity this) { set_anim(this, anim_morph_mfrun07, morph_run8); ai_run(this, 11); }
	// 38
void morph_run6(entity this) { set_anim(this, anim_morph_mfrun06, morph_run7); ai_run(this, 7); }
void morph_run5(entity this) { set_anim(this, anim_morph_mfrun05, morph_run6); ai_run(this, 11); }
	// 36
void morph_run4(entity this) { set_anim(this, anim_morph_mfrun04, morph_run5); ai_run(this, 16); }
void morph_run3(entity this) { set_anim(this, anim_morph_mfrun03, morph_run4); ai_run(this, 16); }
void morph_run2(entity this) { set_anim(this, anim_morph_mfrun02, morph_run3); ai_run(this, 11); }
	// 33
void morph_run1(entity this) { set_anim(this, anim_morph_mfrun01, morph_run2); ai_run(this, 7); }

// ========================
// new attack code
// ========================
void morph_stab2(entity this)
{
	if(!this.enemy)
		return;
	if(!CanDamage(this.enemy, this))
		return;

	ai_face(this);

	vector dir = this.enemy.origin - this.origin + this.enemy.view_ofs;
	vector dist = dir; // prenormalization
	dir = normalize(dir);
	makevectors(this.angles);

	if(vdist(dist, <=, 90))
	{
		_sound(this, CH_WEAPON_SINGLE, "enforcer/enfstop.wav", 1, ATTN_STATIC);
		float attackDamage = (random() * 10) + 20;
		T_Damage(this.enemy, this, this, attackDamage);
		SpawnBlood(this.enemy.origin, v_forward * 150, 14, this.enemy);
	}
	else
	{
		this.effects |= EF_MUZZLEFLASH;
		vector org = this.origin + v_forward * 80 + v_right * 4 + '0 0 4';
		LaunchLaser(this, org, dir);
		if(vdist(dist, >, 0))
		{
			LaunchLaser(this, org, (dir + v_right * 0.04));
			LaunchLaser(this, org, (dir - v_right * 0.04));
		}
		else
		{
			LaunchLaser(this, org, (dir + v_right * 0.10));
			LaunchLaser(this, org, (dir - v_right * 0.10));	
		}
	}	
}

// ========================
// hand to hand attack
// ========================

void morph_attack12(entity this) { set_anim(this, anim_morph_mfatb01, morph_run1); ai_face(this); }
void morph_attack11(entity this) { set_anim(this, anim_morph_mfatb11, morph_attack12); ai_face(this); }
void morph_attack10(entity this) { set_anim(this, anim_morph_mfatb10, morph_attack11); ai_face(this); }
void morph_attack09(entity this) { set_anim(this, anim_morph_mfatb09, morph_attack10); ai_face(this); }
void morph_attack08(entity this) { set_anim(this, anim_morph_mfatb08, morph_attack09); ai_face(this); }
void morph_attack07(entity this) { set_anim(this, anim_morph_mfatb07, morph_attack08); morph_stab2(this); }
void morph_attack06(entity this) { set_anim(this, anim_morph_mfatb06, morph_attack07); ai_face(this); }
void morph_attack05(entity this) { set_anim(this, anim_morph_mfatb05, morph_attack06); ai_face(this); }
void morph_attack04(entity this) { set_anim(this, anim_morph_mfatb04, morph_attack05); ai_face(this); }
void morph_attack03(entity this) { set_anim(this, anim_morph_mfatb03, morph_attack04); ai_face(this); }
void morph_attack02(entity this) { set_anim(this, anim_morph_mfatb02, morph_attack03); ai_face(this); }
void morph_attack01(entity this) { set_anim(this, anim_morph_mfatb01, morph_attack02); ai_face(this); }

void morph_bigattack17(entity this) { set_anim(this, anim_morph_mfatc01, morph_run1); ai_face(this); }
void morph_bigattack16(entity this) { set_anim(this, anim_morph_mfatc16, morph_bigattack17); ai_face(this); }
void morph_bigattack15(entity this) { set_anim(this, anim_morph_mfatc15, morph_bigattack16); ai_face(this); }
void morph_bigattack14(entity this) { set_anim(this, anim_morph_mfatc14, morph_bigattack15); ai_face(this); }
void morph_bigattack13(entity this) { set_anim(this, anim_morph_mfatc13, morph_bigattack14); ai_face(this); }
void morph_bigattack12(entity this) { set_anim(this, anim_morph_mfatc12, morph_bigattack13); ai_face(this); }
void morph_bigattack11(entity this) { set_anim(this, anim_morph_mfatc11, morph_bigattack12); ai_face(this); }
void morph_bigattack10(entity this) { set_anim(this, anim_morph_mfatc10, morph_bigattack11); morph_stab2(this); }
void morph_bigattack09(entity this) { set_anim(this, anim_morph_mfatc09, morph_bigattack10); ai_face(this); }
void morph_bigattack08(entity this) { set_anim(this, anim_morph_mfatc08, morph_bigattack09); ai_face(this); }
void morph_bigattack07(entity this) { set_anim(this, anim_morph_mfatc07, morph_bigattack08); ai_face(this); }
void morph_bigattack06(entity this) { set_anim(this, anim_morph_mfatc06, morph_bigattack07); ai_face(this); }
void morph_bigattack05(entity this) { set_anim(this, anim_morph_mfatc05, morph_bigattack06); ai_face(this); }
void morph_bigattack04(entity this) { set_anim(this, anim_morph_mfatc04, morph_bigattack05); ai_face(this); }
void morph_bigattack03(entity this) { set_anim(this, anim_morph_mfatc03, morph_bigattack04); ai_face(this); }
void morph_bigattack02(entity this) { set_anim(this, anim_morph_mfatc02, morph_bigattack03); ai_face(this); }
void morph_bigattack01(entity this) { set_anim(this, anim_morph_mfatc01, morph_bigattack02); ai_face(this); }

void morph_smack(entity this)
{
	if(!this.enemy)
		return;
	if(!CanDamage(this.enemy, this))
		return;

	ai_face(this);

	if(vdist(this.enemy.origin - this.origin, >, 100))
		return;
		
	float ldmg = (random() * 10) + 10;
	T_Damage(this.enemy, this, this, ldmg);
	
	makevectors(this.angles);
	this.enemy.velocity = v_forward * 100 + '0 0 100';
}

void morph_knockback12(entity this) { set_anim(this, anim_morph_mfknck12, morph_run1); ai_face(this); }
void morph_knockback11(entity this) { set_anim(this, anim_morph_mfknck11, morph_knockback12); ai_face(this); }
void morph_knockback10(entity this) { set_anim(this, anim_morph_mfknck10, morph_knockback11); ai_face(this); }
void morph_knockback09(entity this) { set_anim(this, anim_morph_mfknck09, morph_knockback10); morph_smack(this); }
void morph_knockback08(entity this) { set_anim(this, anim_morph_mfknck08, morph_knockback09); ai_face(this); }
void morph_knockback07(entity this) { set_anim(this, anim_morph_mfknck07, morph_knockback08); ai_face(this); }
void morph_knockback06(entity this) { set_anim(this, anim_morph_mfknck06, morph_knockback07); ai_face(this); }
void morph_knockback05(entity this) { set_anim(this, anim_morph_mfknck05, morph_knockback06); ai_face(this); }
void morph_knockback04(entity this) { set_anim(this, anim_morph_mfknck04, morph_knockback05); ai_face(this); }
void morph_knockback03(entity this) { set_anim(this, anim_morph_mfknck03, morph_knockback04); ai_face(this); }
void morph_knockback02(entity this) { set_anim(this, anim_morph_mfknck02, morph_knockback03); ai_face(this); }
void morph_knockback01(entity this) { set_anim(this, anim_morph_mfknck01, morph_knockback02); ai_face(this); }

void morph_attack(entity this)
{
	float attackChoice = random();
	
	if(attackChoice < 0.50)
		morph_bigattack01(this);
	else if(attackChoice < 0.75)
		morph_attack01(this);
	else
		morph_knockback01(this);
}

// ========================
// ranged attack
// ========================
void morph_fire(entity this)
{
	ai_face(this);
	
	this.effects |= EF_MUZZLEFLASH;
	
	makevectors(this.angles);
	vector org = this.origin + v_forward * 30 + v_right * 8.5 + '0 0 16';
	vector dir = normalize(this.enemy.origin - this.origin);
	LaunchLaser(this, org, dir);
	if(vdist(this.enemy.origin - this.origin, >, 400))
	{
		LaunchLaser(this, org, (dir + v_right * 0.04));
		LaunchLaser(this, org, (dir - v_right * 0.04));
	}
	else
	{
		LaunchLaser(this, org, (dir + v_right * 0.10));
		LaunchLaser(this, org, (dir - v_right * 0.10));	
	}
}

void morph_fire9(entity this) { set_anim(this, anim_morph_mfata09, morph_run1); ai_face(this); }
void morph_fire8(entity this) { set_anim(this, anim_morph_mfata08, morph_fire9); ai_face(this); }
void morph_fire7(entity this) { set_anim(this, anim_morph_mfata07, morph_fire8); ai_face(this); }
void morph_fire6(entity this) { set_anim(this, anim_morph_mfata06, morph_fire7); ai_face(this); }
void morph_fire5(entity this) { set_anim(this, anim_morph_mfata05, morph_fire6); ai_face(this); }
void morph_fire4(entity this) { set_anim(this, anim_morph_mfata04, morph_fire5); morph_fire(this); }
void morph_fire3(entity this) { set_anim(this, anim_morph_mfata03, morph_fire4); ai_face(this); }
void morph_fire2(entity this) { set_anim(this, anim_morph_mfata02, morph_fire3); ai_face(this); }
void morph_fire1(entity this) { set_anim(this, anim_morph_mfata01, morph_fire2); ai_face(this); }

// ========================
// pain
// ========================
void morph_painA10(entity this) { set_anim(this, anim_morph_mfpain10, morph_run1); morph_teleport(this); }
void morph_painA9(entity this) { set_anim(this, anim_morph_mfpain09, morph_painA10); }
void morph_painA8(entity this) { set_anim(this, anim_morph_mfpain08, morph_painA9); }
void morph_painA7(entity this) { set_anim(this, anim_morph_mfpain07, morph_painA8); }
void morph_painA6(entity this) { set_anim(this, anim_morph_mfpain06, morph_painA7); }
void morph_painA5(entity this) { set_anim(this, anim_morph_mfpain05, morph_painA6); }
void morph_painA4(entity this) { set_anim(this, anim_morph_mfpain04, morph_painA5); }
void morph_painA3(entity this) { set_anim(this, anim_morph_mfpain03, morph_painA4); }
void morph_painA2(entity this) { set_anim(this, anim_morph_mfpain02, morph_painA3); }
void morph_painA1(entity this) { set_anim(this, anim_morph_mfpain01, morph_painA2); }

void morph_painB7(entity this) { set_anim(this, anim_morph_mfpbin07, morph_run1); morph_teleport(this); }
void morph_painB6(entity this) { set_anim(this, anim_morph_mfpbin06, morph_painB7); }
void morph_painB5(entity this) { set_anim(this, anim_morph_mfpbin05, morph_painB6); }
void morph_painB4(entity this) { set_anim(this, anim_morph_mfpbin04, morph_painB5); }
void morph_painB3(entity this) { set_anim(this, anim_morph_mfpbin03, morph_painB4); }
void morph_painB2(entity this) { set_anim(this, anim_morph_mfpbin02, morph_painB3); }
void morph_painB1(entity this) { set_anim(this, anim_morph_mfpbin01, morph_painB2); }

void morph_pain(entity this, entity attacker, float damage)
{
	if(skill == 3)
	{
		if(random() > 0.5)
			morph_teleport(this);
		return;
	}
	
	if(this.pain_finished > time)
		return;
	if(random() > 0.25)
		return;
	
	float painChoice = random();
	this.pain_finished = time + 2;

	_sound(this, CH_VOICE, "guard/pain1.wav", 1, ATTN_NORM );

	if(painChoice > 0.6)
		setthink(this, morph_painB1);
	else
		setthink(this, morph_painA1);
	
	this.nextthink = time + 0.1;
}

// ========================
// die
// ========================
void morph_die21(entity this) { set_anim(this, anim_morph_mfdth21, morph_die21); delete(this); }
void morph_die20(entity this) { set_anim(this, anim_morph_mfdth20, morph_die21); }		// 140
void morph_die19(entity this) { set_anim(this, anim_morph_mfdth19, morph_die20); }
void morph_die18(entity this) { set_anim(this, anim_morph_mfdth18, morph_die19); }
void morph_die17(entity this) { set_anim(this, anim_morph_mfdth17, morph_die18); }
void morph_die16(entity this) { set_anim(this, anim_morph_mfdth16, morph_die17); }		// 136
void morph_die15(entity this) { set_anim(this, anim_morph_mfdth15, morph_die16); }
void morph_die14(entity this) { set_anim(this, anim_morph_mfdth14, morph_die15); }
void morph_die13(entity this) { set_anim(this, anim_morph_mfdth13, morph_die14); }
void morph_die12(entity this) { set_anim(this, anim_morph_mfdth12, morph_die13); }		// 132
void morph_die11(entity this) { set_anim(this, anim_morph_mfdth11, morph_die12); }
void morph_die10(entity this) { set_anim(this, anim_morph_mfdth10, morph_die11); }
void morph_die9(entity this) { set_anim(this, anim_morph_mfdth09, morph_die10); this.skin = this.skin + 1; }
void morph_die8(entity this) { set_anim(this, anim_morph_mfdth08, morph_die9); }		// 129
void morph_die7(entity this) { set_anim(this, anim_morph_mfdth07, morph_die8); }
void morph_die6(entity this) { set_anim(this, anim_morph_mfdth06, morph_die7); }
void morph_die5(entity this) { set_anim(this, anim_morph_mfdth05, morph_die6); }		// 126
void morph_die4(entity this) { set_anim(this, anim_morph_mfdth04, morph_die5); }
void morph_die3(entity this) { set_anim(this, anim_morph_mfdth03, morph_die4); }
void morph_die2(entity this) { set_anim(this, anim_morph_mfdth02, morph_die3); }
void morph_die1(entity this) { set_anim(this, anim_morph_mfdth01, morph_die2); }		// 122

void morph_die(entity this, entity inflictor, entity attacker)
{
	_sound(this, CH_VOICE, "guard/death.wav", 1, ATTN_NORM);
	this.solid = SOLID_NOT;
	setthink(this, morph_die1);
	this.nextthink = time + 0.1;
}


// ========================
// hide in floor
// ========================

void morph_wake31(entity this)
{
	set_anim(this, anim_morph_start31, morph_stand1); 

	this.solid = SOLID_SLIDEBOX;
	this.takedamage = DAMAGE_AIM;		
	this.skin = this.skin - 1;
	if(this.owner)
	{
		setthink(this, morph_run1);
		this.nextthink = time + 0.1;
	}
}
void morph_wake30(entity this) { set_anim(this, anim_morph_start30, morph_wake31); }
void morph_wake29(entity this) { set_anim(this, anim_morph_start29, morph_wake30); }
void morph_wake28(entity this) { set_anim(this, anim_morph_start28, morph_wake29); }
void morph_wake27(entity this) { set_anim(this, anim_morph_start27, morph_wake28); }
void morph_wake26(entity this) { set_anim(this, anim_morph_start26, morph_wake27); }
void morph_wake25(entity this) { set_anim(this, anim_morph_start25, morph_wake26); }
void morph_wake24(entity this) { set_anim(this, anim_morph_start24, morph_wake25); }
void morph_wake23(entity this) { set_anim(this, anim_morph_start23, morph_wake24); }
void morph_wake22(entity this) { set_anim(this, anim_morph_start22, morph_wake23); }
void morph_wake21(entity this) { set_anim(this, anim_morph_start21, morph_wake22); }
void morph_wake20(entity this) { set_anim(this, anim_morph_start20, morph_wake21); }
//void morph_wake19(entity this) { set_anim(this, anim_morph_start19, morph_wake20); }
//void morph_wake18(entity this) { set_anim(this, anim_morph_start18, morph_wake19); }
void morph_wake18(entity this) { set_anim(this, anim_morph_start18, morph_wake20); }
void morph_wake17(entity this) { set_anim(this, anim_morph_start17, morph_wake18); }
void morph_wake16(entity this) { set_anim(this, anim_morph_start16, morph_wake17); }
void morph_wake15(entity this) { set_anim(this, anim_morph_start15, morph_wake16); this.skin = 1; }
void morph_wake14(entity this) { set_anim(this, anim_morph_start14, morph_wake15); }
void morph_wake13(entity this) { set_anim(this, anim_morph_start13, morph_wake14); }
void morph_wake12(entity this) { set_anim(this, anim_morph_start12, morph_wake13); }
void morph_wake11(entity this) { set_anim(this, anim_morph_start11, morph_wake12); }
void morph_wake10(entity this) { set_anim(this, anim_morph_start10, morph_wake11); }
void morph_wake9(entity this) { set_anim(this, anim_morph_start09, morph_wake10); }
void morph_wake8(entity this) { set_anim(this, anim_morph_start08, morph_wake9); }
void morph_wake7(entity this) { set_anim(this, anim_morph_start07, morph_wake8); }
void morph_wake6(entity this) { set_anim(this, anim_morph_start06, morph_wake7); }
void morph_wake5(entity this) { set_anim(this, anim_morph_start05, morph_wake6); }
void morph_wake4(entity this) { set_anim(this, anim_morph_start04, morph_wake5); }
void morph_wake3(entity this) { set_anim(this, anim_morph_start03, morph_wake4); }
void morph_wake2(entity this) { set_anim(this, anim_morph_start02, morph_wake3); }
void morph_wake1(entity this)
{
	set_anim(this, anim_morph_start01, morph_wake2);

	_sound(this, CH_VOICE, "guard/see1.wav", 1, ATTN_NORM);
	if(this.owner)
	{
//		this.solid = SOLID_SLIDEBOX;
//		this.takedamage = DAMAGE_NO;

		monsters_total += 1;
  
		this.owner.childrenSpawned = this.owner.childrenSpawned + 1;
	}
}

void morph_setup(entity theMorph)
{
	theMorph.solid = SOLID_SLIDEBOX;
	set_movetype(theMorph, MOVETYPE_STEP);
	theMorph.takedamage = DAMAGE_NO;
	theMorph.flags |= FL_MONSTER;
	theMorph.ideal_yaw = theMorph.angles * '0 1 0';
	if(!theMorph.yaw_speed)
		theMorph.yaw_speed = 20;
	theMorph.view_ofs = '0 0 25';
	theMorph.frame = anim_morph_start01;

	if(!theMorph.damagedbycontents)
		IL_PUSH(g_damagedbycontents, theMorph);
	theMorph.damagedbycontents	= true;

	_setmodel(theMorph, theMorph.model);

	setsize(theMorph, VEC_HULL_MIN, VEC_HULL_MAX);

	theMorph.th_stand = morph_stand1;
	theMorph.th_walk = morph_walk1;
	theMorph.th_run = morph_run1;
	theMorph.th_missile = morph_fire1;
	theMorph.th_melee = morph_attack;
	theMorph.th_pain = morph_pain;
	theMorph.th_die = morph_die;

	if(theMorph.owner)
	{
		theMorph.effects = 0;
		theMorph.health = 200;
		theMorph.spawnflags = theMorph.owner.spawnflags;
	}
	else
	{
		theMorph.effects |= EF_DIMLIGHT;
		theMorph.health = 2000;
	}
	
//	theMorph.frame = $start01;
	theMorph.skin = 2;
}

bool isSpawnPointEmpty(entity thePoint);
void morph_wake(entity this)
{
	if(isSpawnPointEmpty(this))
	{
		morph_setup(this);
		setthink(this, morph_wake1);
	}
	else
	{
		setthink(this, morph_wake);
	}
	
	this.nextthink = time + 0.1;
}

void morph_use(entity this, entity actor, entity trigger)
{
//	this.enemy = actor;
	if(this.delay)
	{
		setthink(this, morph_wake);
		this.nextthink = time + this.delay;
	}
	else
	{
		setthink(this, morph_wake);
		this.nextthink = time + 0.1;
	}
}

entity overlord_find_dest3();
void morph_teleport(entity this)
{
	if(this.owner)
		return;

	if(this.childrenSpawned > (1 + skill))
		return;
		
	entity theDest = overlord_find_dest3();
	if(theDest == world)
		return;

	entity theChild = new(monster_morph);
	theChild.model = this.model;
	theChild.angles = theDest.mangle;
	theChild.owner = this;
	theChild.enemy = this.enemy;
	theChild.movetarget = this.movetarget;
	theChild.goalentity = this.goalentity;
	theChild.mangle = theDest.mangle;
	morph_setup(theChild);
	setorigin(theChild, theDest.origin);
	WITHSELF(theChild, builtin_droptofloor());

	setthink(theChild, morph_wake1);
	theChild.nextthink = time + 0.3;
}

string morph_deathmessage(entity this) { return "was crushed by a Guardian"; }


/*QUAKED monster_morph (1 0 0) (-16 -16 -24) (16 16 32) Ambush Aztec Egyptian Greek
The morphing monster.

Select the look of the monster (Aztec,Greek,Egyptian).
If the monster has a targetname (triggered by something) he will rise up out of the floor when triggered.
*/
spawnfunc(monster_morph)
{
	if(!MP_ROGUE) { delete(this); return; }
	if(deathmatch) { delete(this); return; }

	if(this.spawnflags & MORPH_AZTEC)		// Aztec
	{
		precache_model("progs/morph_az.mdl");
		this.model = "progs/morph_az.mdl";
	}
	else if(this.spawnflags & MORPH_EGYPT)
	// Egyptian
	{
		precache_model("progs/morph_eg.mdl");
		this.model = "progs/morph_eg.mdl";
	}
	else if(this.spawnflags & MORPH_GREEK)	// greek
	{
		precache_model("progs/morph_gr.mdl");
		this.model = "progs/morph_gr.mdl";
	}
	else
		objerror(this, "monster_morph: no skin selection!");
	
	precache_model2("progs/laser.mdl");
	precache_sound2("enforcer/enfire.wav");
	precache_sound2("guard/death.wav");
	precache_sound2("guard/pain1.wav");
	precache_sound2("guard/see1.wav");

	this.deathmessage = morph_deathmessage;
	
	monsters_total += 1;
	if(this.targetname && this.targetname != "")
		this.use = morph_use;
	else
		morph_wake(this);
}
